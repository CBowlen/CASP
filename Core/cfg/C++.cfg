{current_state, read_character_set} -> {target_state}
(i, {) -> 1
(i, }) -> 2
(i, () -> 3
(i, )) -> 4
(i, [) -> 5
(i, ]) -> 6
(i, *) -> 7
(i, %) -> 8
(i, -) -> 9
(i, +) -> 11
(i, =) -> 13
(i, <) -> 15
(i, >) -> 17
(i, !) -> 19
(i, &) -> 21
(i, |) -> 23
(i, ,) -> 25
(i, .) -> 26
(i, abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_) -> 28
(i, 0123456789) -> 30
(i, ;) -> 31

(9, -) -> 10
(9, .) -> 27
(9, 0123456789) -> 30

(11, +) -> 12
(11, .) -> 27
(11, 0123456789) -> 30

(13, =) -> 14

(15, =) -> 16

(17, =) -> 18

(19, =) -> 20

(21, &) -> 22

(23, |) -> 24

(26, 0123456789) -> 27

(27, 0123456789) -> 27

(28, abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_) -> 28
(28, 0123456789) -> 29

(29, abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_) -> 28
(29, 0123456789) -> 29

(30, .) -> 27
(30, 0123456789) -> 30

I(i)
F(1, L_CU_BRACKET)
F(2, R_CU_BRACKET)
F(3, L_PAREN)
F(4, R_PAREN)
F(5, L_SQ_BRACKET)
F(6, L_SQ_BRACKET)
F(7, ASTERISK)
F(8, MOD)
F(9, MINUS)
F(10, DECR)
F(11, PLUS)
F(12, INCR)
F(13, ASSIGN)
F(14, EQ)
F(15, LT)
F(16, LT_EQ)
F(17, GT)
F(18, GT_EQ)
F(19, NOT)
F(20, NOT_EQ)
F(21, BITAND)
F(22, AND)
F(23, BITOR)
F(24, OR)
F(25, COMMA)
F(26, PERIOD)
F(27, FLOAT_LITERAL)
F(28, WORD)
F(29, WORD)
F(30, INT_LITERAL)
F(31, SEMICOLON)

Type    Value     Token
V    "([^"]*(\\\\)*(\\")?)*"             STRING_LITERAL
V    '(((\\)?[^'])|(\\'))'               CHAR_LITERAL
V    //.*?\n                             LINE_COMMENT
V    /\*([^\*]*\*)*\*/

block =:
\{<whitespace>*<statement-list><whitespace>*\}

statement-list =:
(<statement><whitespace>*)+

statement =:
<expression><whitespace>*;

expression =:
<declaration-assignment>|<declaration>|<assignment>

declaration-assignment =:
<primitive-typedef><whitespace>*<identifier><whitespace>*<equal><whitespace>*<value>

declaration =:
<primitive-typedef><whitespace>*<identifier>

assignment =:
<identifier><whitespace>*<equal><whitespace>*<value>

value =:
<float-literal>|<int-literal>|<string-literal>|<identifier>

primitive-typedef =:
(<primitive-type>)(<whitespace>*<asterisk>)*

identifier =:
<non-digit>(<digit>|<non-digit>)*

primitive-type =:
<int-primitive>|<float-primitive>|<fixed-primitive>|<char-primitive>|<bool-primitive>

int-primitive =:
(int)|(long)|(short)|(byte)|(integer)

float-primitive =:
(float)|(double)|(real)|(double<whitespace>+precision)

fixed-primitive =:
fixed

char-primitive =:
char(acter)?

bool-primitive =:
bool(ean)?

float-literal =:
(<digit>+<period><digit>*)|(<digit>*<period><digit>+)

int-literal =:
<digit>+

string-literal =:
"([^"]\\"?)*"

logical-and =:
&&

logical-or =:
\|\|

non-digit =:
[a-zA-Z_]

digit =:
[0-9]

hexadecimal-digit =:
[0-9a-fA-F]

period =:
\.

asterisk =:
\*

whitespace =:
\s

equal =:
=

