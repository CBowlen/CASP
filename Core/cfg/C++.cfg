{current_state, read_character_set} -> {target_state}
(i, {) -> 1
(i, }) -> 2
(i, () -> 3
(i, )) -> 4
(i, [) -> 5
(i, ]) -> 6
(i, *) -> 7
(i, %) -> 8
(i, -) -> 9
(i, +) -> 11
(i, =) -> 13
(i, <) -> 15
(i, >) -> 17
(i, !) -> 19
(i, &) -> 21
(i, |) -> 23
(i, ,) -> 25
(i, .) -> 26
(i, abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_) -> 28
(i, 0123456789) -> 30
(i, ;) -> 31

(9, -) -> 10
(9, .) -> 27
(9, 0123456789) -> 30

(11, +) -> 12
(11, .) -> 27
(11, 0123456789) -> 30

(13, =) -> 14

(15, =) -> 16

(17, =) -> 18

(19, =) -> 20

(21, &) -> 22

(23, |) -> 24

(26, 0123456789) -> 27

(27, 0123456789) -> 27

(28, abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_) -> 28
(28, 0123456789) -> 29

(29, abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_) -> 28
(29, 0123456789) -> 29

(30, .) -> 27
(30, 0123456789) -> 30

I(i)
F(1, L_CU_BRACKET)
F(2, R_CU_BRACKET)
F(3, L_PAREN)
F(4, R_PAREN)
F(5, L_SQ_BRACKET)
F(6, L_SQ_BRACKET)
F(7, ASTERISK)
F(8, MOD)
F(9, MINUS)
F(10, DECR)
F(11, PLUS)
F(12, INCR)
F(13, ASSIGN)
F(14, EQ)
F(15, LT)
F(16, LT_EQ)
F(17, GT)
F(18, GT_EQ)
F(19, NOT)
F(20, NOT_EQ)
F(21, BITAND)
F(22, AND)
F(23, BITOR)
F(24, OR)
F(25, COMMA)
F(26, PERIOD)
F(27, FLOAT_LITERAL)
F(28, ID)
F(29, ID)
F(30, INT_LITERAL)
F(31, SEMICOLON)

ReservedWord(int)
ReservedWord(integer)
ReservedWord(long)
ReservedWord(short)
ReservedWord(byte)
ReservedWord(float)
ReservedWord(double)
ReservedWord(real)
ReservedWord(precision)
ReservedWord(fixed)
ReservedWord(char)
ReservedWord(character)
ReservedWord(bool)
ReservedWord(boolean)

ReservedWord(true)
ReservedWord(false)

ReservedWord(for)
ReservedWord(while)
ReservedWord(do)

ReservedWord(if)
ReservedWord(else)

for-loop =:
[RESERVED=for] [L_PAREN] (<expression>)? [SEMICOLON] (<expression>)? [SEMICOLON] (<expression>)? [R_PAREN] <block>

block =:
[L_CU_BRACKET] <statement-list> [R_CU_BRACKET]

statement-list =:
<statement>+

statement =:
<expression> [SEMICOLON]

expression =:
<declaration-expression>|<assignment-expression>|<bool-expression>|<unary-expression>

declaration-expression =:
<declaration-assignment>|<declaration>

assignment-expression =:
<assignment>

bool-expression =:
(<bool-literal>|<identifier>) (<bool-binary-op> <bool-literal>|<identifier>)+

unary-expression =:
(<identifier> <unary-op>)|(<unary-op> <identifier>)

declaration-assignment =:
<primitive-typedef> <identifier> [ASSIGN] <value>

declaration =:
<primitive-typedef> <identifier>

assignment =:
<identifier> [ASSIGN] <value>

value =:
[FLOAT_LITERAL]|[INT_LITERAL]|<identifier>

primitive-typedef =:
<primitive-type> [ASTERISK]*

identifier =:
[ID]

primitive-type =:
<int-primitive>|<float-primitive>|<fixed-primitive>|<char-primitive>|<bool-primitive>

int-primitive =:
[RESERVED=int]|[RESERVED=long]|[RESERVED=short]|[RESERVED=byte]|[RESERVED=integer]

float-primitive =:
[RESERVED=float]|[RESERVED=double]|[RESERVED=real]|([RESERVED=double] [RESERVED=precision])

fixed-primitive =:
[RESERVED=fixed]

char-primitive =:
[RESERVED=char]|[RESERVED=character]

bool-primitive =:
[RESERVED=bool]|[RESERVED=boolean]

bool-literal =:
[RESERVED=true]|[RESERVED=false]

bool-binary-op =:
[EQ]|[LT]|[LT_EQ]|[GT]|[GT_EQ]|[NOT_EQ]|[BITAND]|[AND]|[BITOR]|[OR]

unary-op =:
[INCR]|[DECR]

